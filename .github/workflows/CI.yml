name: CI

on:
  # Trigger the workflow on push to main or dev, except tag creation
  push:
    branches:
      - 'main'
      - 'dev'
  # Trigger the workflow on pull request
  pull_request: ~
  # Trigger the workflow manually
  workflow_dispatch: ~
  # Trigger after public PR approved for CI
  pull_request_target:
    types: [labeled]
  release:
    types: [created]

jobs:
  qa:
    name: qa
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt

      - name: Check formatting
        uses: actions-rust-lang/rustfmt@v1

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.3"

      - name: Install Python
        run: uv python install

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Check isort
        run: uvx ruff check --select I .

      - name: Check formatting
        run: uvx ruff format --diff .

      - name: Check linting
        run: uvx ruff check .

  pytest:
    name: pytest
    needs:
      - qa
    strategy:
      fail-fast: false
      matrix:
        name:
          - ubuntu-latest
        include:
          - name: ubuntu-latest
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.3"

      - name: Install Python
        run: uv python install

      - name: Install the project
        run: uv sync --group testing

      - name: Run tests
        run: uv run pytest tests
  deploy:
    needs: pytest
    if: ${{ github.event_name == 'release' }}
    name: Upload to Pypi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python setup.py sdist
          twine upload dist/*
